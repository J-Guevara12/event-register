services:
  db:
    #Database in postgresql
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PW}
      POSTGRES_DB: APP_DB
    expose:
      - "5432:5432"
    volumes:
      # Enables data persistency inside system
      - pgdata:/var/lib/postgresql/data
      # Volume that stores the initialization code of the tables
      - ./db/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
      - backnet  

    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d APP_DB'"]
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 10s

  backend:
    # Backend in Flask-Python with Gunicorn as its HTTP server
    build:
      context: backend
      target: builder
      args:
        POSTGRES_PASSWORD_ARG: ${POSTGRES_PW}
        JWT_SECRET_KEY_ARG: ${JWT_SECRET_KEY}
    restart: always
    expose:
      - "8000:8000"
    volumes:
      - ./backend:/code

    depends_on:
      db:
        condition: service_healthy
    networks:
      - backnet
      

  frontend:
    # Frontend in NextJS
    build:
      context: frontend
      target: runner
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run start
    expose:
      - "3000:3000"
    environment:
      NODE_ENV: production

    depends_on:
      - backend
    networks:
      - frontnet


  pgadmin:
    # PG Admin to easily manage the database
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL} 
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PW}
    ports:
      - "5050:80"
    restart: always
    networks:
      - backnet

  proxy:
    # Proxy in nginx, acts also as a reverse proxy
    build: proxy
    restart: always
    ports:
      - 80:80
    depends_on:
      - frontend
      - backend
    networks:
      - frontnet
      - backnet


volumes:
  pgdata:

networks:
  backnet:
  frontnet:
